package view.dialogs.vectorinput;

import view.dialogs.matrixinput.*;
import view.dialogs.codeinput.*;
import java.awt.Point;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import reflection.customdatatypes.SourceCode;
import reflection.customdatatypes.math.Matrix;
import reflection.customdatatypes.math.Vector;
import utils.codecompilation.CodeCompiler;
import utils.codecompilation.CompilationError;
import utils.format.TimeFormat;
import utils.structures.FutureValue;
import utils.structures.tuples.Pair;

public class VectorInputDialog extends javax.swing.JDialog {

    public static Vector showVectorInputDialog(Vector vector, java.awt.Frame parent) {

        VectorInputDialog codeInputDialog = new VectorInputDialog(vector, parent);
        codeInputDialog.setVisible(true);

        return codeInputDialog.result;
    }

    private final Vector prototyp;
    private Vector result;
    private VectorBuilder matrixBuilder;
    private int selectedRow = -1;

    /**
     * Creates new form CodeInputDialog
     */
    public VectorInputDialog(Vector vector, java.awt.Frame parent) {
        super(parent, true);
        initComponents();

        this.prototyp = vector;
        this.matrixBuilder = new VectorBuilder(vector);
        matrixInputPanel.setMatrixBuilder(matrixBuilder);

        Point parentLocation = parent.getLocation();

        double parentX = parentLocation.getX();
        double parentY = parentLocation.getY();
        double parentCenterX = parentX + parent.getWidth() / 2;
        double parentCenterY = parentY + parent.getHeight() / 2;
        setLocation((int) (parentCenterX - getWidth() / 2), (int) (parentCenterY - getHeight() / 2));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        abordButton = new javax.swing.JButton();
        rSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        matrixInputPanel = new view.dialogs.vectorinput.VectorInputPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Eingabe (Vektor)");
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        jLabel1.setText("Vector-Editor");

        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        abordButton.setText("Abbruch");
        abordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abordButtonActionPerformed(evt);
            }
        });

        rSpinner.setModel(new javax.swing.SpinnerNumberModel(3, 1, 20, 1));
        rSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rSpinnerStateChanged(evt);
            }
        });
        rSpinner.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                rSpinnerMouseReleased(evt);
            }
        });
        rSpinner.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                rSpinnerPropertyChange(evt);
            }
        });
        rSpinner.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rSpinnerKeyTyped(evt);
            }
        });

        jLabel3.setText("Zeilen:");

        matrixInputPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        matrixInputPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                matrixInputPanelMousePressed(evt);
            }
        });
        matrixInputPanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                matrixInputPanelKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout matrixInputPanelLayout = new javax.swing.GroupLayout(matrixInputPanel);
        matrixInputPanel.setLayout(matrixInputPanelLayout);
        matrixInputPanelLayout.setHorizontalGroup(
            matrixInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        matrixInputPanelLayout.setVerticalGroup(
            matrixInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 531, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(abordButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(okButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(matrixInputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 636, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(matrixInputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(abordButton)
                    .addComponent(jLabel3)
                    .addComponent(rSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void abordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abordButtonActionPerformed
        dispose();
    }//GEN-LAST:event_abordButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        result = matrixBuilder.getVector();
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped


    }//GEN-LAST:event_formKeyTyped

    private void rSpinnerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_rSpinnerPropertyChange
        updateCounts();
    }//GEN-LAST:event_rSpinnerPropertyChange

    private void rSpinnerMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rSpinnerMouseReleased
        updateCounts();
    }//GEN-LAST:event_rSpinnerMouseReleased

    private void rSpinnerKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rSpinnerKeyTyped
        updateCounts();
    }//GEN-LAST:event_rSpinnerKeyTyped

    private void rSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rSpinnerStateChanged
        updateCounts();
    }//GEN-LAST:event_rSpinnerStateChanged

    private void matrixInputPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_matrixInputPanelMousePressed
        int indexForMousePosition = matrixInputPanel.select(evt.getX(), evt.getY());

        selectedRow = indexForMousePosition;
        
        matrixInputPanel.requestFocus();
        repaint();
    }//GEN-LAST:event_matrixInputPanelMousePressed

    private void matrixInputPanelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_matrixInputPanelKeyPressed
        if (selectedRow >= 0) {
            matrixBuilder.appendToPreparedValue(selectedRow, evt.getKeyChar());
            boolean validMatrix = matrixBuilder.isValidMatrix();
            okButton.setEnabled(validMatrix);
            repaint();
        }
    }//GEN-LAST:event_matrixInputPanelKeyPressed

    private void updateCounts() {
        if (matrixBuilder != null) {
            matrixBuilder.setRowCount((int) rSpinner.getValue());
            repaint();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abordButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private view.dialogs.vectorinput.VectorInputPanel matrixInputPanel;
    private javax.swing.JButton okButton;
    private javax.swing.JSpinner rSpinner;
    // End of variables declaration//GEN-END:variables
}
