/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.debug;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import javax.swing.JFrame;
import javax.swing.Timer;
import logging.AdditionalErr;
import logging.AdditionalLogger;
import logging.AdditionalOut;
import logging.AdvancedLogger;
import model.runproject.debugger.DebuggerRemote;
//import model.runproject.old.OLD_Debugger;
import view.listener.InputManager;
import view.main.MainWindow;

/**
 *
 * @author christiancolbach
 */
public class DebugMonitorWindow extends JFrame implements ActionListener {

    private final MainWindow mainWindow;
    private final Timer timer;
    private boolean debuggerWasNull; // wird von Pre-init-Code des LogPanels gesetzt
    private final InputManager inputManagerForLog;
    private final InputManager inputManagerForContext;

    public void update() {
        DebuggerRemote debugger = mainWindow.getDebuggerRemote();
        if (debugger != null) {
            if (debuggerWasNull) {
                liveThreadPanel.clear();
                debuggerWasNull = false;
                logPanel.setSource(debugger.getExecutionLogger());
            }
            liveThreadPanel.capture(debugger);
            liveThreadDescriptionPanel.capture(debugger);
            liveContextCounterPanel.capture(debugger);
            repaint();
        } else {
            debuggerWasNull = true;
            AdditionalLogger.err.println("debugger ist null.");
        }
    }

    /**
     * Event fuer Timer.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        update();
        repaint();
    }

    /**
     * Creates new form DebugWindow
     */
    public DebugMonitorWindow(MainWindow mainWindow) {
        this.mainWindow = mainWindow;
        initComponents();
        if (mainWindow.getDebuggerRemote() != null) {
            logPanel.setSource(mainWindow.getDebuggerRemote().getExecutionLogger());
        }
        this.timer = new Timer(1000, this);
        this.timer.start();
        this.inputManagerForLog = new InputManager();
        this.inputManagerForLog.addListener(logPanel.getScrollbar());
        liveContextCounterPanel.updateScrollbarArea();
        this.inputManagerForContext = new InputManager();
        this.inputManagerForContext.addListener(liveContextCounterPanel.getScrollbar());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        liveThreadPanel = new view.debug.LiveThreadPanel();
        liveThreadDescriptionPanel = new view.debug.LiveThreadDescriptionPanel();
        //model.runproject.old.OLD_Debugger debugger = mainWindow.getDebugger();
        //Logging logger = null;
        //if(debugger != null) {
            //    logger = debugger.getDebuggerStateLogger();
            //    debuggerWasNull = false;
            //} else {
            //    debuggerWasNull = true;
            //}
        logPanel = new view.sharedcomponents.ConsolePanel(/*logger*/null);
        liveContextCounterPanel = new view.debug.LiveContextCounterPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Debug Monitor");

        javax.swing.GroupLayout liveThreadPanelLayout = new javax.swing.GroupLayout(liveThreadPanel);
        liveThreadPanel.setLayout(liveThreadPanelLayout);
        liveThreadPanelLayout.setHorizontalGroup(
            liveThreadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        liveThreadPanelLayout.setVerticalGroup(
            liveThreadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 141, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout liveThreadDescriptionPanelLayout = new javax.swing.GroupLayout(liveThreadDescriptionPanel);
        liveThreadDescriptionPanel.setLayout(liveThreadDescriptionPanelLayout);
        liveThreadDescriptionPanelLayout.setHorizontalGroup(
            liveThreadDescriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        liveThreadDescriptionPanelLayout.setVerticalGroup(
            liveThreadDescriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 62, Short.MAX_VALUE)
        );

        logPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                logPanelMouseDragged(evt);
            }
        });
        logPanel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                logPanelMouseWheelMoved(evt);
            }
        });
        logPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                logPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                logPanelMouseReleased(evt);
            }
        });
        logPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                logPanelComponentResized(evt);
            }
        });

        javax.swing.GroupLayout logPanelLayout = new javax.swing.GroupLayout(logPanel);
        logPanel.setLayout(logPanelLayout);
        logPanelLayout.setHorizontalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 565, Short.MAX_VALUE)
        );
        logPanelLayout.setVerticalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 301, Short.MAX_VALUE)
        );

        liveContextCounterPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                liveContextCounterPanelMouseDragged(evt);
            }
        });
        liveContextCounterPanel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                liveContextCounterPanelMouseWheelMoved(evt);
            }
        });
        liveContextCounterPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                liveContextCounterPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                liveContextCounterPanelMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout liveContextCounterPanelLayout = new javax.swing.GroupLayout(liveContextCounterPanel);
        liveContextCounterPanel.setLayout(liveContextCounterPanelLayout);
        liveContextCounterPanelLayout.setHorizontalGroup(
            liveContextCounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        liveContextCounterPanelLayout.setVerticalGroup(
            liveContextCounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 49, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(liveContextCounterPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(liveThreadPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(liveThreadDescriptionPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(liveThreadPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(liveThreadDescriptionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(liveContextCounterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean statsFrozen = false;

    private void logPanelComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_logPanelComponentResized
        AdditionalLogger.out.println("Scrollbar-Area von LogPanel wird aktualisiert");
        logPanel.updateScrollbarArea();
        liveContextCounterPanel.updateScrollbarArea();
    }//GEN-LAST:event_logPanelComponentResized

    private void logPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logPanelMousePressed
        inputManagerForLog.mousePressed(evt.getX(), evt.getY(), evt.getButton() == MouseEvent.BUTTON1);
        logPanel.repaint();
    }//GEN-LAST:event_logPanelMousePressed

    private void logPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logPanelMouseDragged
        inputManagerForLog.mouseDragged(evt.getX(), evt.getY());
        logPanel.repaint();
    }//GEN-LAST:event_logPanelMouseDragged

    private void logPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logPanelMouseReleased
        inputManagerForLog.mouseReleased(evt.getX(), evt.getY());
        logPanel.repaint();
    }//GEN-LAST:event_logPanelMouseReleased

    private void logPanelMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_logPanelMouseWheelMoved
        inputManagerForLog.mouseMouseWheelMoved(evt.getUnitsToScroll());
        logPanel.repaint();
    }//GEN-LAST:event_logPanelMouseWheelMoved

    private void liveContextCounterPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_liveContextCounterPanelMousePressed
        inputManagerForContext.mousePressed(evt.getX(), evt.getY(), evt.getButton() == MouseEvent.BUTTON1);
        liveContextCounterPanel.repaint();
    }//GEN-LAST:event_liveContextCounterPanelMousePressed

    private void liveContextCounterPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_liveContextCounterPanelMouseDragged
        inputManagerForContext.mouseDragged(evt.getX(), evt.getY());
        liveContextCounterPanel.repaint();
    }//GEN-LAST:event_liveContextCounterPanelMouseDragged

    private void liveContextCounterPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_liveContextCounterPanelMouseReleased
        inputManagerForContext.mouseReleased(evt.getX(), evt.getY());
        liveContextCounterPanel.repaint();
    }//GEN-LAST:event_liveContextCounterPanelMouseReleased

    private void liveContextCounterPanelMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_liveContextCounterPanelMouseWheelMoved
        inputManagerForContext.mouseMouseWheelMoved(evt.getUnitsToScroll());
        liveContextCounterPanel.repaint();
    }//GEN-LAST:event_liveContextCounterPanelMouseWheelMoved


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private view.debug.LiveContextCounterPanel liveContextCounterPanel;
    private view.debug.LiveThreadDescriptionPanel liveThreadDescriptionPanel;
    private view.debug.LiveThreadPanel liveThreadPanel;
    private view.sharedcomponents.ConsolePanel logPanel;
    // End of variables declaration//GEN-END:variables
}
