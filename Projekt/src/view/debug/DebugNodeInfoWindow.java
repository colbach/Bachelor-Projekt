/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.debug;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
import javax.swing.Timer;
import model.runproject.Debugger;

/**
 *
 * @author christiancolbach
 */
public class DebugNodeInfoWindow extends JFrame implements ActionListener {

    private final Debugger debugger;
    private final Timer timer;
    
    public void update() {
        if(debugger != null) {
            finishedThreadCountLabel.setText(String.valueOf(debugger.getFinishedthreadCount()));
            startedThreadCountLabel.setText(String.valueOf(debugger.getStartedthreadCount()));
            waitingThreadCountLabel.setText(String.valueOf(debugger.getWaitingThreadCount()));
            workingThreadCountLabel.setText(String.valueOf(debugger.getWorkingThreadCount()));
            activeThreadCountLabel.setText(String.valueOf(debugger.getActiveThreadCount()));
        } else {
            System.err.println("debugger ist null.");
        }
    }
    
    /**
     * Event fuer Timer.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        update();
        repaint();
    }
    
    /**
     * Creates new form DebugWindow
     */
    public DebugNodeInfoWindow(Debugger debugger) {
        initComponents();
        this.debugger = debugger;
        this.timer = new Timer(500, this);
        this.timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        startedThreadCountLabel = new javax.swing.JLabel();
        finishedThreadCountLabel = new javax.swing.JLabel();
        waitingThreadCountLabel = new javax.swing.JLabel();
        workingThreadCountLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        activeThreadCountLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        freezeStatsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);

        jLabel1.setText("Gestartete Threads:");

        jLabel2.setText("Wartende Threads:");

        jLabel3.setText("davon bereits beendete Threads:");

        jLabel4.setText("Arbeitende Threads:");

        startedThreadCountLabel.setText("#");

        finishedThreadCountLabel.setText("#");

        waitingThreadCountLabel.setText("#");

        workingThreadCountLabel.setText("#");

        jLabel5.setText("Aktive Threads:");

        activeThreadCountLabel.setText("#");

        jButton1.setText("Ausf√ºhrung pausieren");

        freezeStatsButton.setText("Statistik einfrieren");
        freezeStatsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freezeStatsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startedThreadCountLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(finishedThreadCountLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(waitingThreadCountLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(workingThreadCountLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(activeThreadCountLabel)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 128, Short.MAX_VALUE)
                        .addComponent(freezeStatsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(startedThreadCountLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(finishedThreadCountLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(waitingThreadCountLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(workingThreadCountLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(activeThreadCountLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 257, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(freezeStatsButton)
                    .addComponent(jButton1)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean statsFrozen = false;
    
    private void freezeStatsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freezeStatsButtonActionPerformed
        timer.stop();
        if(statsFrozen) {
            freezeStatsButton.setText("Live-Statistik fortsetzen");
            statsFrozen = false;
        } else {
            freezeStatsButton.setText("Statistik einfrieren");
            statsFrozen = true;
        }
        
    }//GEN-LAST:event_freezeStatsButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel activeThreadCountLabel;
    private javax.swing.JLabel finishedThreadCountLabel;
    private javax.swing.JButton freezeStatsButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel startedThreadCountLabel;
    private javax.swing.JLabel waitingThreadCountLabel;
    private javax.swing.JLabel workingThreadCountLabel;
    // End of variables declaration//GEN-END:variables
}
