package _templategenerator;


import java.io.File;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 * @author christiancolbach
 */
public class TemplateGenerator extends javax.swing.JFrame {

    /**
     * Creates new form TemplateGenerator
     */
    public TemplateGenerator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        outletsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        inletsTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        classNameTextField = new javax.swing.JTextField();
        descriptionTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        iconNameTextField = new javax.swing.JTextField();
        pathTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        packageTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        outletsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Class", "Array"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(outletsTable);

        jLabel1.setText("Inlets:");

        inletsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Class", "Array"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(inletsTable);

        jLabel2.setText("Outlets:");

        jLabel3.setText("Name:");

        jLabel4.setText("Description:");

        jLabel5.setText("Classname:");

        classNameTextField.setText("XXXNodeDefinition");
        classNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classNameTextFieldActionPerformed(evt);
            }
        });

        jLabel6.setText("IconName:");

        pathTextField.setText(".");
        pathTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathTextFieldActionPerformed(evt);
            }
        });

        jButton1.setText("Create");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setText("package:");

        packageTextField.setText("buildin");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(descriptionTextField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(classNameTextField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameTextField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(iconNameTextField))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(packageTextField)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(classNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(packageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(descriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(iconNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            StringBuilder sb = new StringBuilder();

            ArrayList<String> outletNames = new ArrayList<>();
            ArrayList<String> outletClasses = new ArrayList<>();
            ArrayList<Boolean> outletIsArray = new ArrayList<>();
            for (int i = 0; i < outletsTable.getRowCount(); i++) {

                if (outletsTable.getValueAt(i, 0) == null || outletsTable.getValueAt(i, 0).toString().length() == 0) {
                    break;
                }
                outletNames.add((String) outletsTable.getValueAt(i, 0));
                String clas = (String) outletsTable.getValueAt(i, 1);
                if (!clas.endsWith(".class")) {
                    clas += ".class";
                }
                outletClasses.add(clas);
                Boolean b = (Boolean) outletsTable.getValueAt(i, 2);
                if (b == null) {
                    b = false;
                }
                outletIsArray.add((Boolean) b);
            }

            ArrayList<String> inletNames = new ArrayList<>();
            ArrayList<String> inletClasses = new ArrayList<>();
            ArrayList<Boolean> inletIsArray = new ArrayList<>();
            for (int i = 0; i < inletsTable.getRowCount(); i++) {
                if (inletsTable.getValueAt(i, 0) == null || inletsTable.getValueAt(i, 0).toString().length() == 0) {
                    break;
                }
                inletNames.add((String) inletsTable.getValueAt(i, 0));
                String clas = (String) inletsTable.getValueAt(i, 1);
                if (!clas.endsWith(".class")) {
                    clas += ".class";
                }
                inletClasses.add(clas);
                Boolean b = (Boolean) inletsTable.getValueAt(i, 2);
                if (b == null) {
                    b = false;
                }
                inletIsArray.add((Boolean) b);
            }

            sb.append("package " + packageTextField.getText() + ";\n");
            sb.append("import reflection.NodeDefinition;\n");
            sb.append("\n");
            sb.append("public class " + classNameTextField.getText() + " implements NodeDefinition {\n");
            sb.append("\n");

            // Inlets...
            sb.append("\t@Override\n");
            sb.append("\tpublic int getInletCount() {\n");
            sb.append("\t\treturn " + inletNames.size() + ";\n");
            sb.append("\t}\n");
            sb.append("\n");
            sb.append("\t@Override\n");
            sb.append("\tpublic Class getClassForInlet(int index) {\n");
            sb.append("\t\tswitch (index){ \n");
            for (int i = 0; i < inletClasses.size(); i++) {
                sb.append("\t\t\tcase " + i + ":\n");
                sb.append("\t\t\t\treturn " + inletClasses.get(i) + ";\n");
            }
            sb.append("\t\t\tdefault:\n");
            sb.append("\t\t\t\treturn null;\n");
            sb.append("\t\t}\n");
            sb.append("\t}\n");
            sb.append("\n");
            sb.append("\t@Override\n");
            sb.append("\tpublic String getNameForInlet(int index) {\n");
            sb.append("\t\tswitch (index){ \n");
            for (int i = 0; i < inletClasses.size(); i++) {
                sb.append("\t\t\tcase " + i + ":\n");
                sb.append("\t\t\t\treturn \"" + inletNames.get(i) + "\";\n");
            }
            sb.append("\t\t\tdefault:\n");
            sb.append("\t\t\t\treturn null;\n");
            sb.append("\t\t}\n");
            sb.append("\t}\n");
            sb.append("\n");
            sb.append("\t@Override\n");
            sb.append("\tpublic boolean isInletForArray(int index) {\n");
            sb.append("\t\tswitch (index){ \n");
            for (int i = 0; i < inletClasses.size(); i++) {
                sb.append("\t\t\tcase " + i + ":\n");
                sb.append("\t\t\t\treturn " + inletIsArray.get(i) + ";\n");
            }
            sb.append("\t\t\tdefault:\n");
            sb.append("\t\t\t\treturn false;\n");
            sb.append("\t\t}\n");
            sb.append("\t}\n");
            sb.append("\n");

            sb.append("\t@Override\n");
            sb.append("\tpublic boolean isInletEngaged(int index) {\n");
            sb.append("\t\t\rreturn false;\n");
            sb.append("\t}\n");
            sb.append("\n");
            
            // Outlets...
            sb.append("\t@Override\n");
            sb.append("\tpublic int getOutletCount() {\n");
            sb.append("\t\treturn " + outletNames.size() + ";\n");
            sb.append("\t}\n");
            sb.append("\n");
            sb.append("\t@Override\n");
            sb.append("\tpublic Class getClassForOutlet(int index) {\n");
            sb.append("\t\tswitch (index){ \n");
            for (int i = 0; i < outletClasses.size(); i++) {
                sb.append("\t\t\tcase " + i + ":\n");
                sb.append("\t\t\t\treturn " + outletClasses.get(i) + ";\n");
            }
            sb.append("\t\t\tdefault:\n");
            sb.append("\t\t\t\treturn null;\n");
            sb.append("\t\t}\n");
            sb.append("\t}\n");
            sb.append("\n");
            sb.append("\t@Override\n");
            sb.append("\tpublic String getNameForOutlet(int index) {\n");
            sb.append("\t\tswitch (index){ \n");
            for (int i = 0; i < outletClasses.size(); i++) {
                sb.append("\t\t\tcase " + i + ":\n");
                sb.append("\t\t\t\treturn \"" + outletNames.get(i) + "\";\n");
            }
            sb.append("\t\t\tdefault:\n");
            sb.append("\t\t\t\treturn null;\n");
            sb.append("\t\t}\n");
            sb.append("\t}\n");
            sb.append("\n");
            sb.append("\t@Override\n");
            sb.append("\tpublic boolean isOutletForArray(int index) {\n");
            sb.append("\t\tswitch (index){ \n");
            for (int i = 0; i < outletClasses.size(); i++) {
                sb.append("\t\t\tcase " + i + ":\n");
                sb.append("\t\t\t\treturn " + outletIsArray.get(i) + ";\n");
            }
            sb.append("\t\t\tdefault:\n");
            sb.append("\t\t\t\treturn false;\n");
            sb.append("\t\t}\n");
            sb.append("\t}\n");
            sb.append("\n");

            // Weitere
            sb.append("\t@Override\n");
            sb.append("\tpublic String getName() {\n");
            sb.append("\t\treturn \"" + nameTextField.getText() + "\";\n");
            sb.append("\t}\n");
            sb.append("\n");

            sb.append("\t@Override\n");
            sb.append("\tpublic String getDescription() {\n");
            sb.append("\t\treturn \"" + descriptionTextField.getText() + "\" + TAG_PREAMBLE + \"\";\n");
            sb.append("\t}\n");
            sb.append("\n");

            sb.append("\t@Override\n");
            sb.append("\tpublic String getUniqueName() {\n");
            if (classNameTextField.getText().endsWith("NodeDefinition")) {
                sb.append("\t\treturn \"" + packageTextField.getText() + "." + classNameTextField.getText().substring(0, classNameTextField.getText().lastIndexOf("NodeDefinition")) + "\";\n");
            } else {
                sb.append("\t\treturn \"" + packageTextField.getText() + "." + classNameTextField.getText() + "\";\n");
            }
            sb.append("\t}\n");
            sb.append("\n");

            sb.append("\t@Override\n");
            sb.append("\tpublic String getIconName() {\n");
            sb.append("\t\treturn \"" + iconNameTextField.getText() + "\";\n");
            sb.append("\t}\n");
            sb.append("\n");

            sb.append("\t@Override\n");
            sb.append("\tpublic int getVersion() {\n");
            sb.append("\t\treturn 1;\n");
            sb.append("\t}\n");
            sb.append("\n");

//            sb.append("\t@Override\n\tpublic boolean isRunContextCreator() {\n\t\treturn false;\n\t}\n");

            sb.append("\t@Override\n");
            sb.append("\tpublic void run(InOut io, API api) {\n");
            sb.append("\t\t\n");

            for (int i = 0; i < inletNames.size(); i++) {
                String variableName = inletNames.get(i).replaceAll("[^a-zA-Z0-9]", "").toLowerCase();
                if (inletIsArray.get(i)) {
                    sb.append("\t\tObject[] " + variableName + " = io.in(" + i + ", );\n");
                } else {
                    sb.append("\t\t" + inletClasses.get(i).substring(0, inletClasses.get(i).lastIndexOf(".")) + " " + variableName + " = (" + inletClasses.get(i).substring(0, inletClasses.get(i).lastIndexOf(".")) + ")" + " io.in0(" + i + ", );\n");
                }
            }

            sb.append("\t\t\n");

            for (int i = 0; i < outletNames.size(); i++) {
                String variableName = outletNames.get(i).replaceAll("[^a-zA-Z0-9]", "").toLowerCase();
                if (outletIsArray.get(i)) {
                    sb.append("\t\tArrayList<" + outletClasses.get(i).substring(0, outletClasses.get(i).lastIndexOf(".")) + "> " + variableName + " = new ArrayList<>();\n");
                } else {
                    sb.append("\t\t" + outletClasses.get(i).substring(0, outletClasses.get(i).lastIndexOf(".")) + " " + variableName + " = null;\n");
                }
            }

            sb.append("\t\t\n");

            sb.append("\t\t\n");
            sb.append("\t\t\n");

            for (int i = 0; i < outletNames.size(); i++) {
                String variableName = outletNames.get(i).replaceAll("[^a-zA-Z0-9]", "").toLowerCase();
                if (outletIsArray.get(i)) {
                    sb.append("\t\tio.out(" + i + ", " + variableName + ".toArray());\n");
                } else {
                    sb.append("\t\tio.out(" + i + ", " + variableName + ");\n");
                }
            }

            sb.append("\t}\n");
            sb.append("\n");
            sb.append("}\n");

            System.out.println(sb.toString());

            String path = pathTextField.getText();
            if (!path.endsWith("/")) {
                path += "/";
            }
            new File(path).mkdirs();
            path += classNameTextField.getText() + ".java";
            File file = new File(path);
            file.createNewFile();
            PrintWriter writer = new PrintWriter(file, "UTF-8");
            writer.println(sb.toString());
            writer.flush();
            writer.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void pathTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pathTextFieldActionPerformed

    private void classNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_classNameTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Setze System Look-And-Feel...
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException | IllegalAccessException e) {
            e.printStackTrace();
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TemplateGenerator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField classNameTextField;
    private javax.swing.JTextField descriptionTextField;
    private javax.swing.JTextField iconNameTextField;
    private javax.swing.JTable inletsTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JTable outletsTable;
    private javax.swing.JTextField packageTextField;
    private javax.swing.JTextField pathTextField;
    // End of variables declaration//GEN-END:variables
}
